# Функция высшего порядка (higher-order function)
# — функция, которая должна возвращать функцию и/или принимать одну функцию в качестве параметра.


# В функции создаётся функция с указанными параметрами мультипликатора
def func1(mul):
    def func2(value):
        return mul * value

    return func2


temp_fun = func1(3)
result = temp_fun(2)
print(result)

# На практике ожно использовать при создании модульного переиспользуемого кода
# мощное средство абстракции
# уменьшает объём кода, а значит и вероятность ошибок


# Функция map()
# принимает функцию и итерабельную переменную в качестве вргументов
# а возвращает новую переменну полученную путём применения функции к каждомк элементу
# исходной итерабольной переменной

numbers = [1, 2, 3, 4, 5]
squares = map(lambda x: x ** 2, numbers)
print(list(squares))  # 1, 4, 9, 16, 25
squares = map(lambda x: x ** 2, range(7))
print(list(squares))  # 0, 1, 4, 9, 16, 25, 36

# Функция filter()
# принимает в качестве аргументов функцию и итерабельную переменную
# возвращает новую переменную с элементами исходной итерабельной переменной
# удовлетворяющими условию,заданными функцией

numbers = [1, 2, 3, 4, 5]
evens = filter(lambda x: x % 2 == 0, numbers)
print(list(evens))  # 2, 4

# Фунция reduce()
# Принимает в качестве аргументов функцию и итерабельную переменную
# и возвращает одно значение путём многократного применения
# функции к элементам итерабельной переменной

from functools import reduce

numbers = [1, 2, 3, 4]

product = reduce(lambda x,y: x*y, numbers)
print(product) # 24
product = reduce(lambda x,y: x+y, numbers)
print(product) # 10










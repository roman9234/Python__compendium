# Функциональное программирование

# Функциональное программирование (ФП)
# — парадигма, в которой процесс вычисления представляет собой вычисление значений функций.

# Функция первого порядка (first-class function)
# — реализация в языке программирования, позволяющая переменным содержать ссылки на функции.

# Функция высшего порядка (higher-order function) (+++)
# — функция, которая должна возвращать функцию и/или принимать одну функцию в качестве параметра.

# Чистая функция (pure function) (+++)
# — функция без побочных эффектов.

# Лямбда-функция (+++)
# — это анонимная функция, выраженная в виде одного оператора.

# Рекурсивная функция (recursive function) (+++)
# — функция, которая в своем теле вызывает саму себя.

# Каррирование (currying)
# — преобразование функции от многих элементов в набор функций от одного аргумента.

# Замыкание (closure)
# — в Python это функция высшего порядка, которая имеет ссылку на аргументы, определенные в ее области видимости, но являющиеся ее параметрами.

# Частичное применение (partial application)
# — процесс применения функции только лишь к части ее аргументов.


# Преимущество функционального подхода

# код становится чище и короче, повышается надёжность благодаря преобладанию чистых функций
# функциональный код проще тестировать
# компилятор может оптимизировать прогармму, понимая, какие функции вызывать в каком порядке
# возможность распараллеливания вычислений


# Недостатки функционального подхода

# требуется больший объём памяти
# нельзя сделать что-то полезное, используя только чистые функиции

# Python смешивает парадигмы

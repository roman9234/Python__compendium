# Generator — свойство языка, которое позволяет объявить функцию как итератор и следовательно использовать ее, например в цикле for .


# Пример: подсчёт чисел

def count(start=0, step=1):
    _num = start
    while True:
        yield _num
        _num += step


counter = count()
# for i in range(5):
#     print(next(counter))


# Пример: фильтрация списка


# функция генератора будет работать до тех пор, пока не будут сгенерированы все значения
# 1. Функция even_nums определена как функция-генератор, что означает, что она использует ключевое слово yield вместо return для возврата последовательности значений.
# 2. Функция even_nums принимает в качестве аргумента список чисел nums.
def even_nums(nums):
# 3. Цикл for в функции even_nums перебирает каждое число во входном списке чисел nums.
    for _num in nums:
# 4. Оператор if проверяет, является ли текущее число четным (т. е. делится на 2), используя оператор деления по модулю %. Если число четное, он возвращает число в вызывающую функции.
        if _num % 2 == 0:
            # оператор yield генерирует значения на лету
            yield _num


# 5. Переменная my_list определяется как список чисел.
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# 6. Переменная even_gen определяется путем вызова функции even_nums с входным списком my_list. Это создает объект генератора, который можно повторно вызывать, чтобы получить четные числа из списка.
even_gen = even_nums(my_list)
# 7. Цикл for выполняет итерацию по каждому четному числу, выдаваемому объектом генератора even_gen, и печатает его.
for num in even_gen:
    print(num)


# В целом, этот код показывает, как использовать функцию генератора для создания последовательности четных чисел из некоего списка чисел. Его можно использовать в качестве основы для генерации других типов последовательностей на основе определенных условий.




class MyClass:
    # ---- Методы инициализации ----

    def __new__(cls, *args, **kwargs):
        # статический метод, который вызывается для создания нового экземпляра класса
        # используется когда нужно контролировать создание нового экземпляра
        # на практике используется редко
        pass

    def __init__(self):
        # конструктор класса
        pass

    def __del__(self):
        # вызывается когда интерпретатор хочет удалить экземпляр из памяти
        # используется в соединениях с БД, работе с файлами
        pass

    # ---- методы сравнения ----
    # некоторые из этих методов зеркальны, достаточно определить только одну из них, напр < и >=
    def __lt__(self, other):
        # меньше
        pass
    def __le__(self, other):
        # меньше или равно
        pass
    def __eq__(self, other):
        # равно
        pass
    def __ne__(self, other):
        # не равно
        pass
    def __gt__(self, other):
        # больше
        pass
    def __ge__(self, other):
        # больше или равно
        pass
    def __hash__(self):
        # Вызывается встроенной функцией hash().
        # Сравнение объектов x == y подразумевает,
        # что hash(x) == hash(y)
        pass

    # ---- Арифметические операции ----
    # : +, -, *, @, /, // и %
    def __add__(self, other):
        pass

    def __add__(self, other):
        pass
    def __sub__(self, other):
        pass
    def __mul__(self, other):
        pass
    def __matmul__(self, other):
        pass
    def __truediv__(self, other):
        pass
    def __floordev__(self, other):
        pass
    def __mod__(self, other):
        pass
    # Методы вызываются встроенными функциями
    # divmod() и pow()
    # В последнюю можно передать 3 аргумента base, exp и mod (по умолчанию None)
    # или вызвать оператором ** с двумя аргументами
    def __divmod__(self, other):
        pass
    def __pow__(self, other):
        pass

    # ---- Побитовые операции ----
    # искользуются в SQLalchemy

    def __lshift__(self, other):
        pass
    def __rshift__(self, other):
        pass
    def __and__(self, other):
        pass
    def __xor__(self, other):
        pass
    def __or__(self, other):
        pass

    # ---- Унарные операции ----
    # - + ~ abs()

    def __neg__(self):
        pass
    def __pos__(self):
        pass
    def __invert__(self):
        pass
    def __abs__(self):
        pass

    # ---- Методы преобразования ----
    # Методы вызываются для реализации встроенных функций
    # complex(), int() и float()
    # Используется когда Python нужно преобразовать числовой
    # объект в целочисленный (например, при нарезке списков
    # или во встроенных функциях bin(), hex(), oct().

    def __complex__(self):
        pass
    def __int__(self):
        pass
    def __float__(self):
        pass
    def __index__(self):
        # можно использовать для поиска в массиве (пример в другом файле)
        pass

    # ---- Методы преобразования ----
    # округление, округление вверх, вниз

    def __round__(self):
        pass
    def __trunc__(self):
        pass
    def __floor__(self):
        pass
    def __ceil__(self):
        pass

    # ---- Методы представления ----
    # repr()
    # для получения «официального» или «системного» представления объекта в виде строки
    # str()
    # Методы вызываются встроенными функциями format() и str() для получения «неформального»
    # представления объекта в виде строки.

    def __repr__(self):
        pass

    def __str__(self):
        pass

    # ---- Доступ к атрибутам (пример в другом файле) ----
    def __getattribute__(self, item):
        pass

    def __getattr__(self):
        # __getattr__ не вызывается, если атрибут найден с помощью
        # обычного механизма или с помощью __getattribute__
        pass

    def __setattr__(self, key, value):
        # добавляет атрибут
        pass

    def __delattr__(self, item):
        # удаляет атрибут
        pass

    # ---- Вызываемые объекты ----

    def __call__(self, *args, **kwargs):
        # Метод вызывается, когда экземпляр вызывается как функция.
        # Если этот метод определен в классе, то x(arg1, arg2, …)
        # исполняется примерно как type(x).__call__(x, arg1, arg2, …)
        pass

    # ---- Менеджер контекста ----

    def __enter__(self):
        # Вход в контекст среды исполнения, должен вернуть объект, связанный с контекстом среды выполнения.
        # Обычная реализация менеджеров контекста включает в себя переключение состояния глобальных
        # объектов, например блокировку и разблокировку ресурсов, открытие и закрытие файлов и т.д.
        pass

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Выход из контекста среды исполнения, связанного с текущим файлом.
        # Аргументы exc_type, exc_value и traceback описывают исключение, вызвавшее выход из контекста.
        # Если контекст завершился естественным путем, то все три аргумента имеют значение None.
        # Если менеджер контекста должен подавить исключение, то метод должен вернуть True, в противном
        # случае исключение будет обработано обычным способом после выхода из контекста.
        pass

    # ---- Классы дескрипторы (пример в файле)----
    # 2 типа - дискрипторы данных и дискрипторы не данных

    def __get__(self, instance, owner):
        # Метод вызывается для получения доступа к атрибуту класса или атрибуту экземпляра.
        # Метод должен возвращать вычисленное значение или AttributeError
        pass
    def __set__(self, instance, value):
        # Метод вызывается, чтобы установить значение для атрибута экземпляра класса-владельца.
        pass
    def __delete__(self, instance):
        # Метод вызывается, чтобы удалить значение атрибута
        pass



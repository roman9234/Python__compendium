---------------- Понятия ----------------

HTTP:
Hypertext Transfer Protocol, протокол для приема/передачи данных веб страниц.
Он обеспечивает основу для обмена информацией между веб-серверами и клиентами (обычно браузерами). HTTP определяет структуру запросов и ответов, включая методы (GET, POST, PUT, DELETE и др.), заголовки, коды состояния и тело сообщений.

IP адрес:
Уникальный адрес, используемый для идентификации устройства в сети.
IP-адрес состоит из чисел, разделенных точками (в случае IPv4, например, 192.168.0.1) или двоеточиями (в случае IPv6, например, 2001:0db8:85a3:0000:0000:8a2e:0370:7334).

URL
Uniform Resource Locator — это уникальный набор символов, который дает возможность идентифицировать всевозможные ресурсы в интернете (страницы сайтов, файлы, изображения, видео и так далее).


url = "https://platform.productstar.ru/dd5ed729/a27566a8-ee35-4055-b807-00ab7e0d75a2?tab=class&id=4"
Схема (протокол)
https://

Доменное имя или IP адрес - указывает сервер, на котором находится ресурс
platform.productstar.ru/

Путь - указывает конкретный ресурс на сервере
dd5ed729/a27566a8-ee35-4055-b807-00ab7e0d75a2

Параметры запроса - при GET запросе в теле URL могут быть дополнительные параметры
?tab=class&id=4


DNS:
Domain Name System, система доменных имен.
Переводит доменные имена (например, www.example.com) в IP-адреса, необходимые для нахождения и связи с устройствами в сети.
DNS действует как телефонная книга интернета, обеспечивая удобство использования доменных имен вместо сложных для запоминания IP-адресов.

DDD (Domain Driven Design) — паттерн проектирования сервиса

-------- Общее понимание работы сайтов и обмена данными --------

1. Когда пользователь открывает сайт в браузере, он отправляет запрос по протоколу
HTTP (HyperText Transfer Protocol) с указанным идентификатором или URL сайта

2. URL имеет формат вида <домен>/<путь>

3. В дополнение к URL браузер использует DNS (Domain Name System), чтобы узнать
адрес сервера и отправляет запрос на него


---------------- Различие между бэкендом и фронтендом ----------------

Frontend - клиентская сторона

Фронтенд взаимодействует напрямую с пользователем,
используются технологии HTML, CSS, Javascript


Backend — серверная сторона

Бэкенд вызывается косвенно из фронтенда, передает данные
в формате JSON, удобном для обработки на клиентской стороне,
используются серверные языки, такие как Python, Java, Go


Комбинации бэкэнда и фронтенда:

Лэндинг сайт - нет бэкэнда, либо он минимальный
Публичный API - сервис - нет фронтенда, только описание как работать с API
Монолитный сервис - отдаёт сразу готовые HTML страницы с серверной части

Преимущества раздельного подхода:

Высокая масштабируемость при увеличении нагрузки
Гибкость при разработке клиентского интерфейса
Разработчики интерфейса и логики могут работать независимо


Недостатки:

Сложность поддержки
Накладные сетевые расходы на дополнительные походы в бэкенд
(можно сократить количество вызовов разными способами)


---------------- Архитектуры веб-сервисов ----------------

Существует 2 главных подхода к организации веб-сервисов (Бэкэнда)

Монолитная Архитектура
  Один сервис отвечает за все, иногда он может
  являться непосредственно и фронтендом

+ Быстрая и простая разработка
+ Нет накладных расходов на передачу по сети
- Сложно масштабировать по мере развития продукта
- Со временем разработка и выкатка начнут сильно замедляться


Микросервисная архитектура
  Каждый сервис выполняет как можно меньшее количество задач.
  Например, за авторизацию пользователей отвечает
  один сервис, за обработку заказов — другой сервис,
  а за проведение оплаты — третий

+ Разные команды могут выкатывать изменения независимо друг от друга
+ Легко масштабировать с ростом нагрузки
- Сложно построить инфраструктуру для деплоя
- Высокие накладные расходы на передачу данных по сети


Веб-сервисы обычно состоят из трех основных компонентов: веб-сервера, веб-приложения и базы данных.
Веб-сервер принимает запросы от клиентов и перенаправляет их в веб-приложение.
Веб-приложение обрабатывает запросы и обращается к базе данных за необходимыми данными.
Затем оно формирует ответ и отправляет его обратно клиенту через веб-сервер.


Помимо этого существует несколько основных архитектурных стилей веб-сервисов:

SOAP (Simple Object Access Protocol) — это протокол, который определяет, как два объекта в разных процессах могут общаться друг с другом.
  SOAP может использоваться в любом транспортном протоколе, таком как HTTP, SMTP и др.

REST (Representational State Transfer) — это архитектурный стиль, который использует стандартные методы HTTP для создания, чтения, обновления и удаления данных.
  RESTful веб-сервисы просты, их легко использовать и они обеспечивают высокую производительность и надежность.

JSON-RPC и XML-RPC — это протоколы, которые позволяют программам вызывать методы на удаленных серверах,
  используя JSON или XML для кодирования запросов и ответов.

GraphQL — это относительно новый стиль, который позволяет клиентам определять структуру запросов и ответов,
  что делает его гибким и эффективным для сложных веб-приложений.



---------------- Паттерны проектирования в веб-сервисах ----------------

Паттерны нужны для того, чтобы создать скелет сервиса,
   который не будет мешать дальнейшему расширению функционала продукта

Паттерны предоставляют удобный способ для организации
моделей, базы данных, контроллеров для обработки запросов:

Контроллеры
Модели
Слой работы с БД

Пример: DDD - или предметноориентированное проектирование.
Данный паттерн позволяет создать кодовую базу, которая отлично расширяется
1 - Модульность: DDD поощряет разделение
системы на поддомены и контексты
ограниченной ответственности
2 - Ясность бизнес-логики: DDD ставит в главе
разработки точное понимание бизнес логики
3 - Богатые модели: Использование богатых моделей, которые включают
  в себя поведение, делает код более гибким и адаптируемым к изменениям
4 - Богатые модели: Использование богатых моделей, которые включают
  в себя поведение, делает код более гибким и адаптируемым к изменениям













---- подробно про Backend ----

View-layer слой который отвечает за работу с клиентом. Как "пульт" управления
Business-logic - отвечает за то, что по факту дубет происходить, что можно делать, что нельзя делать итд
Data-access layer - слой, который отвечает за интеграцию с Data-Source. Отсекают всю
  специфику конкретного хранлища и представляет бизнес-логике удобный интерфейс для взаимодействия

---- подробно про View-layer ----
Flask - большая шестерёнка которая всё контроллирует
Валидаторы
Контроллеры
Роутеры

Что такое контроллер?
контроллер - это адаптор между клиентом и бизнес-логикой
  из-за специфики того, что сервер и клиент это разные приложения, им нужно как-то общаться между собой
  и протокол общения должен быть удобным для обеих сторон. Но он имеет ограничения. В случае с REST API
  он работает через HTTP, а через него можно передавать только бинарные данные или текст,
  и нельзя передать Instance приложений, connection к базе данных и другие живые сущности.
  нужно превратить их в некий текст, и только потом их переслать
Контроллер призван отсекать эту специфику передачи данных

У web-сокетов и REST API совсем разная специфика и совсем разные гограничения
GRAPH QL тоже имеет свои собственные ограничения, а контроллер все эти ограничения отсекает
  и предоставляет удобный доступ пользователю к бизнес-логике

Контроллер отвечает за:
- аутентификацию (мы узнаём, что это за пользователь), специфика ка информация об аутентификации передаётся от клиента к серверу
- парсинг и валидация входных данных
- вызов соответстующей бизнес-логики
- формирование и сериализация данных и отправка ответа клиенту


Что такое Routing?
Routing - процесс перенаправления запроса пользователя конкретному контроллеру
В REST API каждый URL может быть обрабатываемым своим собственным контроллером
Компонент, который определяет по URL, какому контроннеру передать управление - Router

Что делает Flask?
он может построить роутинг между URI и контроллерами
он может упростить парсинг входных данных (не берёт на себя полностью)
он упростит формирование ответа клиенту

Типичные ошибки:
писать Бизнес-логику в контроллерах (!!!)
  Бизнес логика должна быть на другом уровне, контроллер должен взаимодействовать с её интерфейсом,
  а не содержать её код в себе
писать авторизацию в контроллере
  аутентификация - процесс, когда мы дешифруем, кто же с нами общается
  авторизация - когда мы решаем, что можно делать этому пользователю
не обрабатывать ошибки бизнес-логики
  часто в логике могут возникать ошибки. Проблемы могут появиться, когда эти ошибки передаются в виде ответа клиенту
  это может дать хакерам возможность узнать о внутреннем устройстве бизнес-логики
отдавать в респонс то, что вернула бизнес-логика
  когда бизнес-логика возвращает ответ, очень удобне его и отправить клиенту
  однако это также может привести к раскрытию устройства бизнес-логики для злоумышленников
  нужно чётко контроллировать те поля, которые будут переданы клиенту









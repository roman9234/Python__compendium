Backend — сервер, который предоставляет доступ к своим функциям
посредством API.

Клиент REST API — это пользователь, который использует backend через API,
это может быть web или mobile приложение, или другой backend.

Ресурс - бизнес-сущность, которая "живёт" внутри backend'а приложения, с которым может взаимодействовать клиент
может представлять из себя - документ, файл,  картинка

REST API — это подход проектирования API с использованием протокола HTTP,
при котором клиент взаимодействует с backend’ом
через создание, изменения и удаление ресурсов доступных в приложении.

HTTP (HyperText Transfer Protocol) — прикладной протокол, определяющий язык,
на котором клиенты и серверы общаются друг с другом.

HTTP Header — часть HTTP запроса или ответа, содержащее метаданные,
описывающие его (например, в каком формате записаны данные).


каждый ресурс в REST API имеет уникальный ID, его называют URI

Какие бывают URI:
на все записи
на конкретный экземпляр
на дочерние экземпляры


POST - создание ресурса
GET - получение ресурса
DELETE - удаление ресурса
PATCH - обновление ресурса
PUT - перезапись ресурса целиком


HTTP Codes
при использовании Rest API backend должен HTTP коды ответов:
2XX - группа ответов успешной обработки
200 - ok
201 - created (POST)
202 - accepted (запрос успешно принят но не обработан) - когда обработка не так важна


4XX - группа клиентских ошибок
400 bad request - серверу не понравилось то, что вы отправили
401 not authorized - не авторизован
403 forbidden - пользователю запрещён доступ. Если авторизирован, но не имеет права совершать действие
404 not found - ресурс не найден


5XX - группа ошибок сервера
500 internal server error - произошло неожиданное исключение
503 service unavailable - услуга, которую оказывает API не может быть совершена в этот момент.
  Например сервер на ТО


Формат общения
чаще всего используется JSON, но rest api к нему не привязан.
данные могут быть картинкой, битовым форматом итд
может быть xml, но у него слишком много служебной информации
GRPC - очень компактные, но их невозможно прочитать человеку глазами


---- Как понять что внитки реквеста? ----

HTTP header
заголовок Content-Type

типы контента:

application/json - body  в json формате. как минимум валидация чере json
aoolication / xml - body в xml формате
image / png / jpeg / ... - картинка в формате
multipart / form-data - специфический формат. Сообщение состоит из нескольких частей.
  request будет разбит на части для передачи большого файла
text / html - контент в текстовом формате


Полезные HTTP - header's
authorization - в этом хедере будет некий токен, который поможет серверу вас авторизировать
cache-control - обычно используется в response и говорит о том, как долго этот контент нужно закешировать
origin - очень полезных header, особенно при хакерских атаках.
  Все браузеры ко всем request приклеивают header origin,
  который указывает текущий домен как origin текущего запроса
content-Length - показывает браузеру длину контента, который тот загружает
  это позволяет увидеть, сколько времени осталось до загрузки

---- Примеры ---- :

Ресурсы:

Пользователь
Заказ
Товар
Картинка товара

URI:

/user - все пользователи
/user/:_id - конкретный пользователь
/order - все заказы
/order/:_id - конкретный заказ
/product - все товары
/product/:_id - конкретный продукт
/product/:_id/image - все картинки конкретного продукта
/product/:_id/image/:_id - конкретная картина конкретного продукта
